{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github Projects\\\\netflix-clone\\\\netflix-clone\\\\src\\\\Component\\\\AllRows.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport instance from '../Axios/axios';\nimport \"../CSS/row.css\";\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_URL = \"https://image.tmdb.org/t/p/w500\";\n\nfunction AllRows(props) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    let mounted = true;\n\n    if (mounted) {\n      async function fetchData() {\n        const request = await instance.get(props.fetchURL);\n        setMovies(request.data.results); //  console.log(request.data.results);\n\n        return request;\n      }\n\n      fetchData();\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [props.fetchURL]); // console.log(base_URL+movies[1].poster_path)\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) setTrailerUrl(\"\");else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(err => console.log(err));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row_main_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_poster\",\n      children: movies !== [] && movies.map(movie => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `poster_container ${props.isLargeRow && \"row_posterLarge\"} `,\n          onClick: () => handleClick(movie),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `${base_URL}${props.isLargeRow ? movie === null || movie === void 0 ? void 0 : movie.backdrop_path : movie.poster_path}`,\n            alt: `${movie.original_title}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 35\n          }, this)\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 31\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 14\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AllRows, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = AllRows;\nexport default AllRows;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllRows\");","map":{"version":3,"sources":["D:/Github Projects/netflix-clone/netflix-clone/src/Component/AllRows.js"],"names":["React","useState","useEffect","instance","YouTube","movieTrailer","base_URL","AllRows","props","movies","setMovies","trailerUrl","setTrailerUrl","mounted","fetchData","request","get","fetchURL","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","err","console","log","title","map","isLargeRow","backdrop_path","poster_path","original_title","id"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport instance from '../Axios/axios';\r\nimport \"../CSS/row.css\";\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_URL = \"https://image.tmdb.org/t/p/w500\"\r\n\r\nfunction AllRows(props) {\r\n    const  [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n      let mounted= true;\r\n         if(mounted){\r\n              async function fetchData () {\r\n                     const request = await instance.get(props.fetchURL);\r\n                     setMovies(request.data.results);\r\n                    //  console.log(request.data.results);\r\n                     return request;\r\n              }\r\n\r\n              fetchData()\r\n         }\r\n      return()=>{\r\n          mounted=false;\r\n      }\r\n    },[props.fetchURL]);\r\n\r\n    // console.log(base_URL+movies[1].poster_path)\r\n    const opts={\r\n        height: \"390\",\r\n        width:\"100%\",\r\n        playerVars:{\r\n            autoplay:1,\r\n        }\r\n    }\r\n    \r\n    const handleClick=(movie)=>{\r\n        if(trailerUrl)\r\n         setTrailerUrl(\"\");\r\n        else\r\n        {\r\n            movieTrailer(movie?.name || \"\")\r\n             .then(url=>{\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl( urlParams.get('v'));\r\n             }).catch((err)=>console.log(err));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='row_main_container'>\r\n             <h3>{props.title}</h3> \r\n             \r\n             <div className=\"row_poster\">\r\n                 {movies!==[] &&\r\n                     movies.map((movie)=>{\r\n                         return(\r\n                              <div className={`poster_container ${props.isLargeRow && \"row_posterLarge\"} `} key={movie.id} onClick={()=>handleClick(movie)}>\r\n                                  <img src={`${base_URL}${props.isLargeRow ? movie?.backdrop_path:  movie.poster_path }`} alt={`${movie.original_title}`} />\r\n                              </div>\r\n                         )\r\n                      }\r\n                    )\r\n                 }\r\n             </div>\r\n             {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default AllRows;"]},"metadata":{},"sourceType":"module"}